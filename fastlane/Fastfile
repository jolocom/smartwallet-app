
# fastlane is recommended to run with `bundle exec fastlane`
before_all do |lane, options|
  ensure_bundle_exec
end

desc 'Load the App Store Connect API token'
lane :get_appstoreconnect_api_key do
  begin
    sh("git clone dev@hetz1.jolocom.io:app-store-connect-auth ")
  rescue
    # handle error
    puts "app-store-connect-auth"
  end

    key_id = File.read("app-store-connect-auth/key_id.txt")
    issuer_id = File.read("app-store-connect-auth/issuer_id.txt")

    app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_filepath: "./fastlane/app-store-connect-auth/" + key_id + ".p8",
      duration: 1200,
      in_house: false
    )
end

desc 'Get API token for MS AppCenter'
lane :get_appcenter_token do
  begin
    sh("git clone git@infra.jolocom.io:appcenter-secrets")
  rescue
    # handle error
    puts "appcenter auth already present"
  end
  File.read("appcenter-secrets/api_key.txt")
end

desc  'Get Sentry Auth Token'
lane :sentry_auth do
  begin
      sh("git clone git@infra.jolocom.io:sentry-auth")
  rescue
      puts "sentry token already present"
  end
  sh("cp ./sentry-auth/sentry.properties ../ios/sentry.properties")
  sh("cp ./sentry-auth/sentry.properties ../android/sentry.properties")
end

desc "Release the app to the Test Flight or the App Store"
lane :release do |options|
  sentry_auth
  get_appstoreconnect_api_key
  match(type: 'appstore')
  build_app(
    scheme: "SmartWallet",
    workspace: './ios/SmartWallet.xcworkspace',
    export_method: 'app-store',
    include_bitcode: false,
  )
  case options[:target]
  when "release"
    upload_to_app_store
  when "beta"
    upload_to_testflight
  end
end


# lanes for ios building, signing and deployment
platform :ios do 

  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do
    match(app_identifier: 'com.jolocom.wallet')
  end

  desc 'Fetch certificates. Build the iOS application.'
  lane :build do
    certificates
    build_app(
      scheme: "SmartWallet",
      workspace: './ios/SmartWallet.xcworkspace',
      export_method: 'ad-hoc'
    )
  end

  desc 'Build iOS application and upload to Appcenter'
  lane :alpha do
    sentry_auth
    get_appstoreconnect_api_key
    build
    api_token = get_appcenter_token.strip
    appcenter_upload(
      api_token: api_token,
      owner_name: "JolocomGmbH",
      owner_type: "organization", # Default is user - set to organization for appcenter organizations
      app_name: "smartwallet-redesign-ios",
      file: lane_context[SharedValues::IPA_OUTPUT_PATH],
      notify_testers: true # Set to false if you don't want to notify testers of your new release (default: `false`)
    )
  end

  desc 'Build iOS application and upload to TestFlight'
  lane :beta do
    release(target: "beta")
  end

  desc 'Build iOS application and upload to the App Store'
  lane :store do
    #ensure_git_branch(branch: 'master')
    #ensure_git_status_clean
    release(target: "release")
  end

end


lane :upload do |options|
  case options[:target]
  when 'release'
    upload_to_play_store
  when 'beta'
    upload_to_play_store(track: 'beta')
  end
end

# lanes for android building, signing and deployment
platform :android do
  desc "Clones the secrets repo for android and provides the keystore, the store API key and returns the keystore Password"
  lane :get_secrets do
    begin
      sh("git clone git@infra.jolocom.io:android-secrets")
    rescue
      puts "secrets already present"
    end
    password = prompt(
      # password is in notion
      text: "password: ",
      secure_text: true
    )
    sh(
      "openssl enc -aes-256-cbc -d -in ./android-secrets/key.enc -out ../key.json -k #{password} -md md5 2>/dev/null ",
      log: false
    )
    sh(
      "openssl enc -aes-256-cbc -d -in ./android-secrets/keystorePass.enc -k #{password} -md md5 2>/dev/null ",
      log: false
    )
  end

  # NOTE: you should run build lane from the root dir of the project
  lane :build do
    releaseFilePath = File.join(Dir.pwd, "android-secrets", "JoloSmartWallet.keystore")
    #build_android_app(task: 'clean')
    sentry_auth

    keyPass = get_secrets.strip
    build_android_app(
      task: 'assemble',
      build_type: 'Release',
      project_dir: './android',
      gradle_path: './gradlew',
      print_command: true,
      properties: {
        "android.injected.signing.store.file" => releaseFilePath,
        "android.injected.signing.store.password" => keyPass,
        "android.injected.signing.key.alias" => "JoloSmartWallet",
        "android.injected.signing.key.password" => keyPass,
      }
    )
  end

  desc 'Build Android application and upload to Appcenter'
  lane :alpha do
    sentry_auth
    build
    api_token = get_appcenter_token.strip
    appcenter_upload(
      api_token: api_token,
      owner_name: "JolocomGmbH",
      owner_type: "organization",
      app_name: "smartwallet-redesign-android",
      file: lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH],
      notify_testers: true
    )
  end


  desc "Submit a new Beta Build to Play Store"
  lane :beta do
    build
    upload(target: 'beta')
  end

  desc "Submit a new Release Build to Play Store"
  lane :release do
    build
    upload(target: 'release')
  end

end
